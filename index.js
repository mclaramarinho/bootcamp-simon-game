//Constant of the buttons' id names
const boxes = ['green','red','blue','yellow'];

//Array of a pattern generated by the computer
var pattern = [];
//Array containing the pattern clicked by the user
var clickedPattern = [];

var started = false;
var level = 0;

$(document).keypress(function(){
    if(!started){ //If the variable started IS NOT true
        $('#level-title').text("Level " + level); //The title will change to Level 0
        nextSequence(); //A next sequence will be initiated
        started=true; //Turning this var to true will make the keypress listener do nothing        
    }
})

$('.btn').click(function(){ //adds a click listener to each button
    var btnClicked = $(this).attr('id'); //gets the ID of the button clicked
    clickedPattern.push(btnClicked); //pushes the ID of the button clicked inside the clickedPattern array
    playSound(btnClicked); //plays the sound for each button clicked
    animatePressed(btnClicked); //animates each button clicked
    checker(clickedPattern.length-1); //checks if the button clicked is equal to the indicated by the computer generated pattern
})

function nextSequence(){
    clickedPattern = []; //empties the clickedPattern array
    level++; //increases the level
    $('#level-title').text("Level " + level); //displays the current level
    var randomNumber = Math.floor(Math.random()*4);
    pattern.push(boxes[randomNumber]); //pushes inside the pattern array, the new item
    
    $('#'+boxes[randomNumber]).fadeIn().fadeOut().fadeIn(); //animates the new item
    playSound(boxes[randomNumber]); //plays the sound for the new item
}

function playSound(name){ //plays sounds for the events in the game 
    var audio = new Audio('sounds/'+name+'.mp3');
    audio.play();
}

function animatePressed(color){ //animates the clicked buttons
    $('#'+color).addClass('pressed'); //adds the css rules for the class pressed to the button clicked
    setTimeout(() => {
        $('#'+color).removeClass('pressed'); //removes the class pressed from the button clicked, after 100ms
    }, 100);
}

function checker(currentLevel){ 
    if(pattern[currentLevel]===clickedPattern[currentLevel]){ //checks if the clicked button matches the correspondent button indicated by the computer
        if(clickedPattern.length === pattern.length){ //checks if the current round is over
            setTimeout(() => {
                nextSequence();
            }, 1000);
        }
    }else{ //if the clicked button does not match the correspondent button indicated by the computer
        gameOver(); //indicates game over
        startOver(); //allows the player to start over
    }
}

function gameOver(){
    $('body').addClass('game-over'); //adds the css rules for the class game-over to the body
    playSound('wrong'); //plays the corresponding sound
    $('#level-title').text("Game Over, Press Any Key to Restart"); //changes the title to instruct the next step
    setTimeout(function() {
        $('body').removeClass('game-over'); //removes the class game-over after 200ms
    }, 200);
}

function startOver(){ //resets the following variables and array
    started = false; //by turning it to false, the keypress event listener will respond again
    level = 0;
    pattern = []; 
}